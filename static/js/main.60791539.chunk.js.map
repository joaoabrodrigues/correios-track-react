{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","typography","useNextVariants","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","object","event","setState","defineProperty","target","value","handleKeyPress","key","state","loading","handleClick","info","bind","assertThisInitialized","_this2","axios","get","concat","then","response","data","_this3","react_default","a","createElement","styles","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","TextField_default","id","label","type","margin","helperText","onChange","onKeyPress","Button_default","disabled","onClick","Send_default","Chip_default","objeto","numero","categoria","includes","Table_default","TableHead_default","TableRow_default","TableCell_default","component","scope","TableBody_default","evento","map","tipo","criacao","hora","descricao","destino","unidade","local","cidade","uf","tipounidade","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60791539.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'typeface-roboto';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nimport axios from 'axios'\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: '#212121',\r\n      },\r\n    },\r\n    typography: {\r\n      useNextVariants: true,\r\n    },\r\n});\r\n\r\nclass App extends Component {\r\n  constructor () {\r\n    super()\r\n    this.state =  {\r\n      info: '',\r\n      object: '',\r\n      loading: false\r\n    }\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  handleChange = object => event => {\r\n    this.setState({\r\n      [object]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleKeyPress = event => {\r\n    if (event.key === 'Enter' && this.state.object && !this.state.loading) {\r\n      this.handleClick();\r\n    }\r\n  };\r\n\r\n  handleClick() {\r\n    if (!this.state.loading) {\r\n      this.setState({info: '', loading: true})\r\n\r\n      axios.get(`http://correiostrack.joaoabrodrigues.com:8080/api/v1/track/${this.state.object}`)\r\n           .then(response => this.setState({info: response.data, loading: false}))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MuiThemeProvider theme={theme}>\r\n        <div className=\"App\">\r\n          <AppBar position=\"static\" color=\"primary\">\r\n            <Toolbar>\r\n              <Typography variant=\"h6\" color=\"inherit\">\r\n                Correios Track Service\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n\r\n          <TextField\r\n            id=\"track-object\"\r\n            label=\"Objeto\"\r\n            type=\"text\"\r\n            margin=\"normal\"\r\n            helperText=\"Exemplo: AA123456789BR\"\r\n            onChange={this.handleChange('object')}\r\n            onKeyPress={this.handleKeyPress}\r\n          />\r\n          <Button \r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className=\"Button\"\r\n            disabled={(!this.state.object || this.state.loading)}\r\n            onClick={() => { this.handleClick() }}> \r\n              Rastrear\r\n              <SendIcon className=\"Icon\"/>\r\n            </Button>\r\n\r\n            <br />\r\n            <br />\r\n            <br />\r\n\r\n            { this.state.info &&\r\n              <Chip color=\"primary\" label={\"Rastreamento de Objeto - \" + this.state.info.objeto[0].numero} />\r\n            }\r\n            \r\n            <br />\r\n            <br />\r\n            <br />\r\n\r\n            { this.state.info && !this.state.info.objeto[0].categoria.includes(\"ERRO\") &&\r\n                <Table className=\"TableSize\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell  component=\"th\" scope=\"row\"><strong>Data / Hora</strong></TableCell>\r\n                      <TableCell  component=\"th\" scope=\"row\"><strong>Status / Localidade</strong></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    { this.state.info && \r\n                      this.state.info.objeto[0].evento.map(evento => {\r\n                        return (\r\n                          <TableRow key={evento.tipo + evento.criacao}>\r\n                            <TableCell className=\"TableColor\">{evento.data + ' ' + evento.hora}</TableCell>\r\n                              <Table>\r\n                                <TableBody>\r\n                                  <TableRow className=\"TableColor\" key={evento.tipo + evento.descricao}>\r\n                                    <TableCell><strong>{evento.descricao}</strong></TableCell>\r\n                                  </TableRow>\r\n                                </TableBody>\r\n                              </Table>\r\n                              <Table>\r\n                                <TableBody>\r\n                                  <TableRow key={evento.tipo+evento.destino}>\r\n                                  { !evento.destino &&\r\n                                    <TableCell>\r\n                                      <strong>Local:</strong> { evento.unidade.local + ' - ' + evento.unidade.cidade + '/' + evento.unidade.uf + ' - ' + evento.unidade.tipounidade }\r\n                                    </TableCell>\r\n                                  }\r\n                                  { evento.destino &&\r\n                                    <TableCell className=\"Origem\">\r\n                                      <strong>Origem:</strong> { evento.unidade.local + ' - ' + evento.unidade.cidade + '/' + evento.unidade.uf + ' - ' + evento.unidade.tipounidade}\r\n                                    </TableCell>\r\n                                  }\r\n                                  { evento.destino &&\r\n                                    <TableCell>\r\n                                      <strong>Destino:</strong> { evento.destino[0].local + ' - ' + evento.destino[0].cidade + '/' + evento.destino[0].uf }\r\n                                    </TableCell>\r\n                                  }\r\n                                  </TableRow>\r\n                                </TableBody>\r\n                              </Table>\r\n                          </TableRow>\r\n                        );})\r\n                      }\r\n                  </TableBody>\r\n                </Table>\r\n            }\r\n\r\n            { this.state.info && this.state.info.objeto[0].categoria.includes(\"ERRO\") &&\r\n                <div>Objeto não encontrado na base de dados dos Correios!</div>\r\n            }\r\n        </div>\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}